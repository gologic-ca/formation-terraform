# Bienvenue dans Terraform !

## üéâ F√©licitations !

Cet atelier est termin√©. Vous avez appris les bases de Terraform et cr√©√© une infrastructure compl√®te comprenant :

‚úÖ **Gestion des fichiers locaux** avec le provider `local`  
‚úÖ **G√©n√©ration de secrets** avec le provider `random`  
‚úÖ **Gestion s√©curis√©e des secrets** avec HashiCorp Vault  
‚úÖ **Conteneurisation** avec Docker  
‚úÖ **Base de donn√©es** MySQL  
‚úÖ **Serveur web** Nginx + PHP  

## Nettoyage de l'environnement

Pour nettoyer votre environnement et supprimer toutes les ressources cr√©√©es :

```bash
terraform destroy
```

**‚ö†Ô∏è Attention :** Cette commande supprimera d√©finitivement tous les conteneurs et fichiers cr√©√©s.

## üöÄ Pour aller plus loin

### Exercice avanc√© 1 : Boucles avec `for_each`

Apprenez √† cr√©er plusieurs ressources similaires en utilisant une boucle `for_each`.

Ajoutez cette variable dans `variables.tf` :

```terraform
variable "files" {
  type        = map(string)
  description = "Fichiers √† cr√©er avec leur contenu"
  default = {
    "file1.txt" = "Ceci est le premier fichier."
    "file2.txt" = "Deuxi√®me fichier g√©n√©r√© par Terraform."
    "file3.txt" = "Encore un autre fichier !"
  }
}
```

R√©active la variable author:
```terraform
variable "author" {
  type        = string
  description = "Fournir votre nom comme auteur"
}
```

Puis ajoutez cette ressource dans `main.tf` :

```terraform
resource "local_file" "multi_files" {
  for_each = var.files

  filename = "$${path.module}/$${each.key}"
  content  = each.value
}
```

**Avantages de `for_each` :**
- Cr√©e une ressource par √©l√©ment de la map
- `each.key` = nom du fichier
- `each.value` = contenu du fichier
- Plus maintenable que de dupliquer le code

### Exercice avanc√© 2 : Templates dynamiques

Cr√©ez des fichiers dynamiquement √† l'aide de templates Terraform.

1. **Cr√©ez un fichier template** `template.md.tftpl` :

```markdown
# Bienvenue dans Terraform !

## Auteur : $${author}
## Date de cr√©ation : $${timestamp}
## Environnement : $${environment}

Terraform est un outil d'Infrastructure as Code puissant !

### Statistiques du d√©ploiement
- Nombre de fichiers cr√©√©s : $${file_count}
- Version de Terraform : $${tf_version}
```

2. **Ajoutez ces variables** dans `variables.tf` :

```terraform
variable "environment" {
  type        = string
  description = "Environnement de d√©ploiement"
  default     = "development"
}
```

3. **Ajoutez cette ressource** dans `main.tf` :

```terraform
resource "local_file" "config" {
  filename = "$${path.module}/config.md"
  content = templatefile("$${path.module}/template.md.tftpl", {
    author      = var.author
    timestamp   = timestamp()
    environment = var.environment
    file_count  = length(var.files)
    tf_version  = "1.x.x"
  })
}
```

### Exercice avanc√© 3 : Conditions et logique

Utilisez des conditions pour adapter le comportement selon l'environnement.

```terraform
resource "local_file" "env_config" {
  filename = "$${path.module}/env-$${var.environment}.json"
  content = jsonencode({
    environment = var.environment
    debug_mode  = var.environment == "development" ? true : false
    log_level   = var.environment == "production" ? "error" : "debug"
    database_url = var.environment == "production" ? "mysql://prod-server:3306/webapp" : "mysql://mysql_container:3306/webapp"
  })
}
```

### Exercice avanc√© 4 : Outputs complexes

Cr√©ez des outputs plus sophistiqu√©s dans `outputs.tf` :

```terraform
output "infrastructure_summary" {
  description = "R√©sum√© de l'infrastructure d√©ploy√©e"
  value = {
    containers = {
      vault = docker_container.vault.name
      mysql = docker_container.mysql.name
      nginx = docker_container.nginx_php.name
    }
    ports = {
      vault_ui = "http://localhost:8200"
      webapp   = "http://localhost:8080"
      mysql    = "localhost:3306"
    }
    files_created = length(local_file.multi_files)
    environment   = var.environment
  }
}

output "connection_strings" {
  description = "Cha√Ænes de connexion pour les services"
  value = {
    mysql_internal = "mysql://root:$${nonsensitive(random_password.password.result)}@mysql_container:3306/webapp"
    vault_ui       = "http://localhost:8200 (token: root)"
  }
  sensitive = true
}
```

## üìö Ressources pour approfondir

### Concepts Terraform avanc√©s √† explorer
- **Modules** : R√©utilisabilit√© et organisation du code
- **Workspaces** : Gestion de plusieurs environnements
- **Remote State** : Stockage distant de l'√©tat (S3, Consul, etc.)
- **State Locking** : Pr√©vention des conflits en √©quipe
- **Import** : Int√©gration de ressources existantes
- **Provisioners** : Ex√©cution de scripts post-d√©ploiement

### Providers populaires
- **AWS** : `hashicorp/aws`
- **Azure** : `hashicorp/azurerm`
- **Google Cloud** : `hashicorp/google`
- **Kubernetes** : `hashicorp/kubernetes`
- **Helm** : `hashicorp/helm`

### Outils compl√©mentaires
- **Terragrunt** : Wrapper pour la gestion de configurations complexes
- **Atlantis** : CI/CD pour Terraform
- **Terraform Cloud** : Plateforme SaaS HashiCorp
- **Checkov** : Analyse de s√©curit√© pour Terraform

## üéØ Prochaines √©tapes recommand√©es

1. **Pratiquez avec un cloud provider** (AWS, Azure, GCP)
2. **Apprenez les modules Terraform** pour la r√©utilisabilit√©
3. **Explorez Terraform Cloud** pour la collaboration
4. **Int√©grez Terraform dans un pipeline CI/CD**
5. **√âtudiez les bonnes pratiques de s√©curit√©**

## üìñ Documentation officielle

- [Terraform Documentation](https://www.terraform.io/docs)
- [Terraform Registry](https://registry.terraform.io/)
- [HashiCorp Learn](https://learn.hashicorp.com/terraform)

**F√©licitations encore une fois !** Vous avez maintenant les bases solides pour utiliser Terraform dans vos projets d'Infrastructure as Code. üöÄ
