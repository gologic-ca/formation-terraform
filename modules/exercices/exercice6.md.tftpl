# Bienvenue dans Terraform !

## Exercice 6 : Serveur Web Nginx avec PHP

### Objectifs de cet exercice

Dans cet exercice, nous allons apprendre √† :
- D√©ployer un serveur web Nginx avec support PHP
- Configurer le montage de volumes pour le code de l'application
- Tester l'int√©gration entre les services web et base de donn√©es
- Finaliser notre stack d'infrastructure compl√®te

### Vue d'ensemble de l'infrastructure finale

Notre infrastructure compl√®te comprend maintenant :
- ‚úÖ **HashiCorp Vault** - Gestion s√©curis√©e des secrets
- ‚úÖ **Serveur MySQL** - Base de donn√©es
- üîÑ **Serveur Nginx + PHP** - Application web *(cet exercice)*

### √âtape 1 : D√©ployer le serveur Nginx avec PHP

Cr√©ez un nouveau fichier `nginx.tf` avec le contenu suivant :

```terraform
resource "docker_image" "nginx_php" {
  name = "trafex/php-nginx:3.9.0"
}

resource "docker_container" "nginx_php" {
  name  = "nginx_php"
  image = docker_image.nginx_php.image_id

  ports {
    internal = 8080
    external = 8080
  }
 
  env = [
    "MYSQL_HOSTNAME=host.docker.internal", #For non Docker-Desktop users use 172.17.0.1
    "DB_PASSWORD=$${random_password.password.result}",
  ]

  mounts {
    target    = "/var/www/html"
    source    = "$${abspath(path.module)}/webapp-content/nginx-php/html"
    read_only = true
    type      = "bind"
  }

  must_run = true
  restart  = "always"

  depends_on = [docker_container.mysql]
}
```

### Explication du code

#### Image Docker
- **trafex/php-nginx:3.9.0** : Image optimis√©e combinant Nginx et PHP-FPM
- Configuration l√©g√®re et s√©curis√©e pour les applications PHP

#### Configuration des ports
- **Port interne** : 8080 (port d'√©coute dans le conteneur)
- **Port externe** : 8080 (port accessible depuis l'h√¥te)

#### Montage de volume
- **Target** : `/var/www/html` - R√©pertoire racine du serveur web
- **Source** : `./webapp-content/nginx-php/html` - Code source de l'application PHP
- **Read-only** : Emp√™che les modifications du code depuis le conteneur

### √âtape 2 : Ajouter le module de fin

Ajoutez un appel du module *exercice* pour l'exercice de fin dans `main.tf` :

```terraform
module "exos_fin" {
  source   = "./modules/exercices"
  exercice = "fin"
}
```

### √âtape 3 : D√©ploiement

D√©ployez la nouvelle version du code :

```bash
terraform plan
terraform apply
```

### V√©rification des r√©sultats

#### V√©rifier tous les conteneurs
```bash
docker ps
```

Vous devriez voir trois conteneurs en cours d'ex√©cution :
- `vault_container`
- `mysql_container` 
- `nginx_php`

#### Consulter les logs Nginx/PHP
```bash
docker logs nginx_php
```

Recherchez des messages indiquant que Nginx et PHP-FPM sont d√©marr√©s correctement.

#### Tester l'application web
Acc√©dez √† l'application dans votre navigateur :
**URL :** http://localhost:8080


### Validation

√Ä la fin de cet exercice, vous devrez trouver un nouveau fichier Markdown (MD) pour passer √† [l'exercice de fin](./fin.md) !

### F√©licitations ! üéâ

Vous avez maintenant une infrastructure compl√®te avec :
- Gestion s√©curis√©e des secrets (Vault)
- Base de donn√©es (MySQL)  
- Serveur web avec PHP (Nginx)

Cette architecture repr√©sente les fondements d'une application web moderne !